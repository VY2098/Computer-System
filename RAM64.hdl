// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to address=address[0..2], out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT address=address[0..2], out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = load, sel = address[3..5],
             a = oa, b = ob, c = oc, d = od,
             e = oe, f = af, g = og, h = oh);

    RAM8(in = in, load = oa, address=address[0..2], out = o0);
    RAM8(in = in, load = ob, address=address[0..2], out = o1);
    RAM8(in = in, load = oc, address=address[0..2], out = o2);
    RAM8(in = in, load = od, address=address[0..2], out = o3);
    RAM8(in = in, load = oe, address=address[0..2], out = o4);
    RAM8(in = in, load = af, address=address[0..2], out = o5);
    RAM8(in = in, load = og, address=address[0..2], out = o6);
    RAM8(in = in, load = oh, address=address[0..2], out = o7);

    Mux8Way16(a = o0, b = o1, c = o2, d = o3, e = o4,
              f = o5, g = o6, h = o7, sel = address[3..5], out=out);
}